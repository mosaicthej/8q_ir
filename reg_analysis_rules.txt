Rule:

1.
For pattern:

```ir
  MOVE(temp X, ROP(temp A, RltOp, temp B));
  CJUMP(temp X, L1, L2);
```

Unless temp X is referenced somewhere else
  Do not allocate a register for temp X.
  These two can usually combine into one of the
  cjump in riscv.

2.
global consts.

Since this is accessed very often and the value
  does not change (when declared as const).

Since a CONST can't be a lval, it is either
  a) compared with a temp
    For comparsion against the temp in a CJUMP:
      (optimize for less instructions)
    - if there are enough registers left in the pool:
        use a *free* register to load the CONST
        then perform CJUMP.
        The temp will only be alive for the CJUMP.

      (optimize for less register usage, which,
      substantially reduces the number of instructions)
    - depending on the context, the temp can be modified
      with the CONST in a i-type instruction.
      Should the temp be restored (1 extra instruction)
        will be depending on if the temp is used again.   

  b) used as a member in BINOP.
    This can be done with just use an i-type instruction
    (unless when it's too large, then use a register)

    This is also true for commonly used values such as
    ONE, TWO, THREE, FOUR in codegen.

3.
i would assume arrays as const that is already existed
  in the `.data` section.

Their addresses will be saved in a register if they are hot.
The hot registers will be noted in beginning of the codegen.
Or, they can just be referred directly as immediate values
(assembler will take care of it).

If array size is known at compile time, 
  assume we allocate them in the `.data` section instead 
  of dynamically allocating them.

Subsequently, the temps associated with the arrays will
  not be allocated a register, they will just be used as
  immediate values.

the arrays should be allocated this way:
- word-aligned
- name of the array: this is the header, leave a word of space.
- the array itself: this is the body, leave a word of space.
- the array body: how much ever the space it needs.

```asm
.data

.align 2 # word-aligned
arr_row: .word 8 # header (const N)
arr_row_body: .space 32 # this is pre-computed.
...
```

Thus, there is no need to add base address and the offset
  separately, just do this would suffice:

```asm
.text
...
# assume t6 <-> r
...
slli  t1, t6, 2 # to access row[r],
lw t0, arr_row(t1) # t1 is the offset.
...
```

